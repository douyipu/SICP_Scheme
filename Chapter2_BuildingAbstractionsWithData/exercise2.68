#lang sicp
(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (leaf? object) (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree
                    (make-leaf 'D 1)
                    (make-leaf 'C 1)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (encode-symbol letter tree)
  (cond ((not (element? letter (symbols tree)))
         (error "This symbol is not encoded: " letter))
        ((leaf? tree) '())
        ((element? letter (symbols (left-branch tree)))
         (cons '0 (encode-symbol letter (left-branch tree))))
        ((element? letter (symbols (right-branch tree)))
         (cons '1 (encode-symbol letter (right-branch tree))))))

(define (element? x elements)
  (if (null? elements)
      #f
      (if (eq? x (car elements))
          #t
          (element? x (cdr elements)))))

(encode '(A D A B B C A) sample-tree)