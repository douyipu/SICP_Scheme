#lang sicp
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

(define v1 (list 1 2 3 4))
(define v2 (list 2 3 4 5))
(define w (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))

(define (dot-product v w)
  (accumulate + 0 (map * v w)))
(dot-product v1 v2)

;(define (matrix-*-vector m v)
;  (map () m))

;(define (transpose mat)
;  (accumulate-n ⟨ ?? ⟩ ⟨ ?? ⟩ mat))

;(define (matrix-*-matrix m n)
;  (let ((cols (transpose n)))
;    (map ⟨ ?? ⟩ m)))
  