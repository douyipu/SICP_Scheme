#lang sicp

(define (make-interval a b) (cons a b))
(define (upper-bound x) (cdr x))
(define (lower-bound x) (car x))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (add-interval x (make-interval (- (upper-bound y))
                                 (- (lower-bound y)))))

(define (width interval)
  (/ (- (upper-bound interval)
        (lower-bound interval))
     2))
(define (width-sum x y)
  (+ (width x) (width y)))
(define (width-sub x y)
  (+ (width x) (width y)))
(define x (make-interval 1 3))
(define y (make-interval 5 9))
(define sum (add-interval x y))
(width x)
(width y)
(width-sum x y)
sum
(define sub (sub-interval y x))
(width sum)
sub
(width sub)
(width-sub x y)

