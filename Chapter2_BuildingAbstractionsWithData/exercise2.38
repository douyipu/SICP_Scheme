#lang sicp
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))


(accumulate / 1.0 (list 1 2 3))
(fold-left / 1 (list 1 2 3))
(accumulate list nil (list 1 2 3))
(fold-left list nil (list 1 2 3))
(accumulate + 0 (list 1 2 3))
(fold-left + 0 (list 1 2 3))
;; 要使得 op 保证 fold-right 和 fold-left 对任何序列都产生同样的效果,op 必须具有交换律。
;; 也就是 (op x y) 恒等于 (op y x)。

;; 比如加法(+)或者乘法(*),and 或者 or,都满足交换律。
;; fold-right 和 fold-left 的求值结果就会相同。