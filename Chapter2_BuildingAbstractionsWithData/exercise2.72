#lang sicp
;注意我们 encode-symbol 的递归实现中,会先搜索左分支 left-branch,
;假如左分支可以找到符号,就可直接编码,不再搜索右分支 right-branch。
;在 n = 5 的树中,频率最不频繁的符号处于左分支的末端,而左分支优先,
;只需要搜索 n = 5 次,就可编码符号。
;频率最频繁的符号处于右分支,并且在顶端。而左分支优先,
;于是 encode-symbol 需要遍历树的所有节点,才能找到匹配的叶节点,编码这个符号。
;而 n = 1 时,树节点有 1 个;n = 2 时,节点有 3 个; n = 3 时,节点有 5 个。
;依此类推,当为 n 时,节点有 2 * n - 1 个。于是编码频率最频繁的符号,需要搜索 2 * n - 1 次。
;总结,练习 2.71 的树,编码频率最频繁的符号,增长速度为 2 * n - 1。
;编码最不频繁的符号,增长速度为 n。