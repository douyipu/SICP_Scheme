#lang sicp
(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1
                     (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list
                             (right-branch tree)
                             result-list)))))
  (copy-to-list tree '()))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define a (make-tree 7
                     (make-tree 3
                                (make-tree 1 nil nil)
                                (make-tree 5 nil nil))
                     (make-tree 9
                                nil 
                                (make-tree 11 nil nil))))
(define b (make-tree 3
                     (make-tree 1 nil nil)
                     (make-tree 7
                                (make-tree 5 nil nil)
                                (make-tree 9
                                           nil
                                           (make-tree 11 nil nil)))))

(define c (make-tree 5
                     (make-tree 3
                                (make-tree 1 nil nil)
                                nil)
                     (make-tree 9
                                (make-tree 7  nil nil)
                                (make-tree 11 nil nil))))

(tree->list-1 a) ; '(1 3 5 7 9 11)
(tree->list-2 a) ; '(1 3 5 7 9 11)

(tree->list-1 b) ; '(1 3 5 7 9 11)
(tree->list-2 b) ; '(1 3 5 7 9 11)

(tree->list-1 c) ; '(1 3 5 7 9 11)
(tree->list-2 c) ; '(1 3 5 7 9 11)

;结论是,tree->list-1 和 tree->list-2 对所有的树都有相同的结果。

;假设树中节点数目为 N。
;tree->list-1 中每遍历一个节点,调用 1 次 append 和 1 次 cons,
;总调用了 N 次 append 和 cons。单个 cons 的时间复杂度为 O(1),
;而 append 随着列表长度增大而增大,这样似乎 tree->list-1 的时间复杂度为 O(N ^ 2)。
;但是注意到,每次 append 都是左右子树,而平衡树左右子树的节点并非线性增长,
;而是每次的节点都被砍了一半。于是 tree->list-1 的复杂度应该是 O(N * logN)。
;tree->list-2 中遍历一个节点,调用了 1 次 cons, 总调用了 N 次 cons。
;cons 的时间复杂度为 O(1), 于是 tree->list-2 的时间复杂度为 O(N)。
;结论是,tree->list-1 的时间复杂度为 O(N * logN),tree->list-2 的时间复杂度为 O(N)。
;tree->list-2 执行时间增长慢一些。






