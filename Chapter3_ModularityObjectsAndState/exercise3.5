#lang sicp
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (estimate-integral predicate? x-lower y-lower x-upper y-upper trials)
  (define (experiment)
    (predicate? (random-in-range x-lower x-upper)
                (random-in-range y-lower y-upper)))
  (* (monte-carlo trials experiment)
     (- x-upper x-lower)
     (- y-upper y-lower)))
(define (square x) (* x x))
(define (make-predicate x-center y-center r)
  (lambda (x y)
    (if (> (+ (square (- x x-center))
              (square (- y y-center)))
           (square r))
        false
        true)))
(define unit-circle-predicate (make-predicate 0 0 1))
(define (estimate-pi trials)
  (estimate-integral unit-circle-predicate -1.0 -1.0 1.0 1.0 trials))
(estimate-pi 100000)
        