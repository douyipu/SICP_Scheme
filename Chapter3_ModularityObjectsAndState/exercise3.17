#lang sicp
(define (count-pairs x)
  (let ((visited '()))
    (define (count-pairs-set x)
      (cond ((not (pair? x)) 0)
            ((element-of-set? x visited) 0)
            (else
             (set! visited (cons x visited))
             (+ (count-pairs-set (car x))
                (count-pairs-set (cdr x))
                1))))
    (count-pairs-set x)))
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((eq? x (car set)) true)
        (else (element-of-set? x (cdr set)))))
(count-pairs (list 'a 'b 'c))
(count-pairs (list 'a 'b 'c 'd))
(count-pairs (list 'a 'b 'c 'd 'e 'f 'g))
(define x (list 'a 'b))
(set-cdr! (cdr x) x)
(count-pairs x)