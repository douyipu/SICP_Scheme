#lang sicp
(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup key-list table)
      (cond ((null? key-list) false)
            ((null? (cdr key-list))
             (let ((record
                    (assoc (car key-list) (cdr table))))
               (if record (cdr record) false)))
            (else
             (let ((subtable
                    (assoc (car key-list) (cdr table))))
               (if subtable
                   (lookup (cdr key-list) subtable)
                   false)))))
    (define (insert! key-1 key-2 value)
      (let ((subtable
             (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record
                   (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1 (cons key-2 value))
                            (cdr local-table)))))
      'ok)
    (define (insert! key-list table value)
      (cond ((null? key-list) (error "There is no key."))
            ((null? (cdr key-list))
             (let ((record
                    (assoc (car key-list) (cdr table))))
               (if record
                   (set-cdr! record value)
                   (set-cdr! table
                             (cons (cons (car key-list) value)
                                   (cdr table))))))
            (else
             (let ((subtable
                    (assoc (car key-list) (cdr table))))
               (if subtable
                   (insert! (cdr key-list) subtable value)
                   (set-cdr! table
                             (cons (list (car key-list) ())
                                   (cdr table)))))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation: TABLE" m))))
    dispatch))
(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))