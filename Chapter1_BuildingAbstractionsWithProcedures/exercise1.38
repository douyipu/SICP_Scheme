#lang sicp
(define (cont-frac-iter n d k)
  (define (iter i result)
    (if (= i 0)
        result
        (iter (- i 1) (/ (n i) (+ (d i) result)))))
  (iter (- k 1) (/ (n k) (d k))))
(+ 2
   (cont-frac-iter (lambda (i) 1.0)
                   (lambda (i)
                     (if (= (remainder i 3) 2)
                         (/ (* 2 (+ i 1)) 3)
                         1))
                   100))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (cont-frac-recur n d k)
  (define (recur i)
    (if (= i k)
        (/ (n i) (d i))
        (/ (n i) (+ (d i) (recur (+ i 1))))))
  (recur 1))

(+ 2
   (cont-frac-recur (lambda (i) 1.0)
                    (lambda (i)
                      (if (= (remainder i 3) 2)
                          (/ (* 2 (+ i 1)) 3)
                          1))
                    100))
                         
                 
                             
                 