#lang sicp
(define (filtered-accumulate-recur combiner null-value term a next b filter)
  (cond ((> a b) null-value)
        ((filter a)
         (combiner (term a)
                   (filtered-accumulate-recur combiner null-value term (next a) next b filter)))
        (else (filtered-accumulate-recur combiner null-value term (next a) next b filter))))

;; prime? function
(define (square x) (* x x))
(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))

;;the sum of the squares of the prime numbers in the interval a to b
(define (inc x) (+ x 1))
(define (sum-square-prime a b)
  (filtered-accumulate-recur + 0 square a inc b prime?))
(sum-square-prime 1 10)

;;the product of all the positive integers less than n
;;that are relatively prime to n
;;(i.e., all positive integers i < n such that GCD(i ,n)=1)
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (identity x) x)
(define (product-relatively-prime n)
  (define (relatively-prime? x)
    (= (gcd x n) 1))
  (filtered-accumulate-recur * 1 identity 1 inc n relatively-prime?))
(product-relatively-prime 10)

