#lang sicp
(define (accumulate-recur combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate-recur combiner null-value term (next a) next b))))
(define (accumulate-iter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a)
              (combiner (term a) result))))
  (iter a null-value))

(define (sum term a next b)
  (accumulate-iter + 0 term a next b))
(define (product term a next b)
  (accumulate-iter * 1 term a next b))
;;test
(define (inc n) (+ n 1))
(define (cube x) (* x x x))
(define (sum-cubes0 a b)
  (sum cube a inc b))
(sum-cubes0 1 10)
(define (identity x) x)
(define (sum-integers0 a b)
  (sum identity a inc b))
(sum-integers0 1 10)
(define (pi-sum0 a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))
(* 8 (pi-sum0 1 1000))