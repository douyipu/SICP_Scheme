#lang sicp

(define (linear-combination a b x y)
  (+ (* a x) (* b y)))
(define size 2)
size
(* 5 size)
(define pi 3.14159)
(define radius 10)
(* pi (* radius radius))
(define circumference (* 2 pi radius))
circumference

(define (square x) (* x x))
(square 21)
(square (+ 2 5))
(square (square 3))
(define (sum-of-square x y)
  (+ (square x) (square y)))
(sum-of-square 3 4)
(define (f a)
  (sum-of-square (+ a 1) (* a 2)))
(f 5)

(define (abs1 x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
(define (abs2 x)
  (cond ((< x 0) (- x))
        (else x)))
(define (abs3 x)
  (if (< x 0)
      (- x)
      x))
(abs1 -1)
(abs2 -1)
(abs3 -1)

;(and (> x 5) (< x 10))
(define (>=1 x y) (or (> x y) (= x y)))
(define (>=2 x y) (not (< x y)))
(>=1 2 3)
(>=2 2 3)

(define (new-sqrt x)
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (define (good-enough? guess)
    (< (/ (abs (- guess (improve guess))) guess) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (average y z)
    (/ (+ y z) 2))
  (sqrt-iter 1.0))
(new-sqrt 9)

(define (factorial-recursive n)
  (if (= n 1)
      1
      (* n (factorial-recursive (- n 1)))))
(factorial-recursive 5)

(define (factorial-iteration n)
  (define (factorial-iter product counter)
    (if (> counter n)
        product
        (factorial-iter (* product counter) (+ counter 1))))
  (factorial-iter 1 1))
(factorial-iteration 5)

(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
(define (fib1 n)
  (fib-iter 1 0 n))
(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))
(fib 4)
(fib1 4)

(define (count-change amount) (cc amount 5))
(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else (+ (cc amount
                     (- kinds-of-coins 1))
                 (cc (- amount
                        (first-denomination
                         kinds-of-coins))
                     kinds-of-coins)))))
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
(count-change 100)

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(gcd 206 40)

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(prime? 251)

;;page51
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
(fast-prime? 199 100)

;; page 76
(define (sum-integers a b) ;;从a加到b的和
  (if (> a b)
      0
      (+ a (sum-integers (+ a 1) b))))
(sum-integers 4 6)
;;;;;;;;;;;;;;;;;;;;;;;;
(define (cube x) (* x x x))
(define (sum-cubes a b)
  (if (> a b)
      0
      (+ (cube a)
         (sum-cubes (+ a 1) b))))
(sum-cubes 1 3) ;;1+8+27
;;;;;;;;;;;;;;;;;;;;;;;;
(define (pi-sum a b)
  (if (> a b)
      0
      (+ (/ 1.0 (* a (+ a 2)))
         (pi-sum (+ a 4) b))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
(define (inc n) (+ n 1))
(define (sum-cubes0 a b)
  (sum cube a inc b))
(sum-cubes0 1 10)
(define (identity x) x)
(define (sum-integers0 a b)
  (sum identity a inc b))
(sum-integers0 1 10)
(define (pi-sum0 a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))
(* 8 (pi-sum0 1 1000))
;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))
(integral cube 0 1 0.01)
(integral cube 0 1 0.001)
;;page83

(define (pi-sum1 a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))
(* 8 (pi-sum1 1 1000))

(define (integral1 f a b dx)
  (* (sum f
          (+ a (/ dx 2.0))
          (lambda (x) (+ x dx))
          b)
     dx))
(integral1 cube 0 1 0.01)

((lambda (x y z) (+ x y (square z)))
 1 2 3)

(define (function x y)
  (let ((a (+ 1 (* x y)))
        (b (- 1 y)))
    (+ (* x (square a))
       (* y b)
       (* a b))))

(define (average x y) (/ (+ x y) 2))
(define (search f neg-point pos-point)
  (let ((midpoint (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point)
        midpoint
        (let ((test-value (f midpoint)))
          (cond ((positive? test-value)
                 (search f neg-point midpoint))
                ((negative? test-value)
                 (search f midpoint pos-point))
                (else midpoint))))))
(define (close-enough? x y)
  (< (abs (- x y)) 0.001))
(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value))
           (search f a b))
          ((and (negative? b-value) (positive? a-value))
           (search f b a))
          (else
           (error "Values are not of opposite sign" a b)))))
(half-interval-method sin 2.0 4.0)
(half-interval-method (lambda (x) (- (* x x x) (* 2 x) 3))
                      1.0
                      2.0)
;;page92
(define tolerance 0.0001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(fixed-point cos 1.0)
(fixed-point (lambda (y) (+ (sin y) (cos y)))
             1.0)
(define (sqrt x)
  (fixed-point (lambda (y) (average y (/ x y)))
               1.0))
(sqrt 9.0)
;;page97
(define (average-damp f)
  (lambda (x) (average x (f x))))
((average-damp square) 10)
(define (sqrt0 x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0))
(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
               1.0))
(cube-root 27)

(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))
(define dx 0.00001)
((deriv cube) 5)
(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (sqrt1 x)
  (newtons-method
   (lambda (y) (- (square y) x)) 1.0))
(sqrt1 9)

(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))
(define (sqrt2 x)
  (fixed-point-of-transform
   (lambda (y) (/ x y)) average-damp 1.0))
(sqrt2 9)
(define (sqrt3 x)
  (fixed-point-of-transform
   (lambda (y) (- (square y) x)) newton-transform 1.0))
(sqrt3 9)

;;pag105



















